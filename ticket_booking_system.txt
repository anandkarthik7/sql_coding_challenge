-- #1. database creation and data insertion 

use t_b_s;
show tables;

insert into venue(venue_name, address)
values
('mumbai', 'marol andheri(w)'),
('chennai', 'it park'),
('pondicherry', 'state beach');

insert into customer(customer_name,email,phone_number)
values
('harry potter','harry@gmail.com','45454545'),
('ronald weasley','ron@gmail.com','45454545'),
('hermione granger','her@hmail.com','45454545'),
('draco malfoy','drac@gmail.com','45454545'),
('ginni weasley','ginni@gmail.co','45454545'),
('severus snape', 'sev@gmail.co','56556');

insert into
event(event_name,event_date,event_time,total_seats,available_seats,ticket_price,event_type,venue_id)
values
('late ms. lata mangeshkar musical', '2021-09-12', '20:00',320,270,600, 'concert',3),
('csk vs rcb', '2024-04-11','19:30',23000,3,3600, 'sports', 2),
('csk vs rr', '2024-04-19','19:30', 23000,10,3400, 'sports', 2),
('mi vs kkr', '2024-05-01', '15:30', 28000,100,8000, 'sports',1);

insert into booking(event_id,customer_id,num_tickets,total_cost,booking_date)
values(1,1,2,640,'2021-09-12'),
(1,4,3,960,'2021-09-12'),
(2,1,3,10800,'2024-04-11'),
(2,3,5,18000,'2024-04-10'),
(3,5,10,34000,'2024-04-15'),
(4,2,4,32000,'2024-05-01');

-- #2 select all events

select * from event;

/*
'1', 'late ms. lata mangeshkar musical', '2021-09-12', '20:00', '320', '270', '600', 'concert', '3'
'2', 'csk vs rcb', '2024-04-11', '19:30', '23000', '3', '3600', 'sports', '2'
'3', 'csk vs rr', '2024-04-19', '19:30', '23000', '10', '3400', 'sports', '2'
'4', 'mi vs kkr', '2024-05-01', '15:30', '28000', '100', '8000', 'sports', '1'
*/

-- #3 events with available tickets.

select event_name,event_date, available_seats
from event
where available_seats<>0;
/*
late ms. lata mangeshkar musical 2021-09-12 270
csk vs rcb 2024-04-11 3
csk vs rr 2024-04-19 10
mi vs kkr 2024-05-01 100
*/
-- #4 events name partial match with 'cup'.
select *
from event
where event_name like '%cup%';
/*
null
*/
-- #5 events with ticket price range is between 1000 to 2500.

select *
from event
where ticket_price between 1000 and 2500 ;
/*
null
*/
-- #6 events with dates falling within a specific range
select *
from event
where event_date between '2024-04-12' and '2024-10-10';
/*
3 csk vs rr 2024-04-19 19:30:00 23000 10 3400 sports 2
4 mi vs kkr 2024-05-01 15:30:00 28000 100 8000 sports 1
*/
-- #7 events with available tickets that also have "concert" in their name.
select *
from event
where available_seats<>0 and event_type = 'concert';

/*
1 late ms. lata mangeshkar musical 2021-09-12 20:00:00 320 270 600
concert 3
*/
-- #8 users in batches of 5, starting from the 6th user
-- #9 booking details contains booked no of ticket more than 4.
select *
from booking
where num_tickets > 4;

/*
10 2 3 5 18000 2024-04-10
11 3 5 10 34000 2024-04-15
*/

-- #10 customer information whose phone number end with '000'.
select *
from customer
where phone_number like '%000';

-- #11 events in order of which seat capacity is more than 15000.

select *
from event
where total_seats > 15000;
/*
2 csk vs rcb 2024-04-11 19:30:00 23000 3 3600 sports 2
3 csk vs rr 2024-04-19 19:30:00 23000 10 3400 sports 2
4 mi vs kkr 2024-05-01 15:30:00 28000 100 8000 sports 1
*/
-- #12 events name not start with 'x', 'v', '2'
select event_name
from event
where event_name not like '[x,v,2]%';

/*
late ms. lata mangeshkar musical
csk vs rcb
csk vs rr
mi vs kkr
*/
-- #1 events and their average ticket prices.

select e.event_name, avg(b.total_cost)
from event e, booking b
where e.event_id = b.event_id
group by e.event_id;

/*
late ms. lata mangeshkar musical 800.0000
csk vs rcb 14400.0000
csk vs rr 34000.0000
mi vs kkr 32000.0000
*/

-- #2 total revenue generated by events.

select e.event_id,e.event_name, sum(b.total_cost * num_tickets) as total_revenue_generated
from event e, booking b
where e.event_id = b.event_id
group by e.event_id;

/*
1 late ms. lata mangeshkar musical 4160
2 csk vs rcb 122400
3 csk vs rr 340000
4 mi vs kkr 128000
*/

-- #3 event with the highest ticket sales.

select e.event_name, b.num_tickets
from event e,booking b
where e.event_id = b.event_id
group by e.event_name,b.num_tickets
order by b.num_tickets desc
limit 1;

/*
csk vs rr 10
*/

-- #4 sql query to calculate the total number of tickets sold for each event.

select e.event_name, sum(distinct b.num_tickets) as total_ticket_sold
from event e, booking b
where e.event_id = b.event_id
group by event_name;

/*
csk vs rcb 8
csk vs rr 10
late ms. lata mangeshkar musical 5
mi vs kkr 4
*/

-- #5 events with no ticket sales.
select e.event_name, sum(distinct b.num_tickets) as total_tickets_sold
from event e, booking b
where e.event_id = b.event_id
group by event_name
having total_tickets_sold = 0;

-- #6 the user who has booked the most tickets.

select c.customer_name,sum(distinct b.num_tickets) as total_tickets
from customer c, booking b
where c.customer_id = b.customer_id
group by c.customer_name
order by total_tickets desc
limit 1;

/*
ginni weasley 10
*/

-- #8 average ticket price for events in each venue.

select v.venue_name, avg(e.ticket_price) as average_price
from venue v, event e
where v.venue_id = e.venue_id
group by v.venue_name;

/*
mumbai 8000.0000
chennai 3500.0000
pondicherry 600.0000
*/

-- # 9 the total number of tickets sold for each event type.

select e.event_type,sum(b.num_tickets) as total_tickets
from event e join booking b
on e.event_id = b.event_id
group by e.event_type;

/*concert 5
sports 22*/

-- #11.Customers that booked more than one event

select c.customer_name,c.email,c.phone_number,count(distinct b.event_id) as num_of_events_booked
from customer c join booking b on c.id = b.customer_id
group by c.customer_name
having count(distinct b.event_id) > 1;

/*
# customer_name, email, phone_number, num_of_events_booked
'harry potter', 'harry@gmail.com', '45454545', '2'
*/

-- #12. total revenue generated for each user

select c.customer_name,sum(total_cost) as total_revenue
from customer c join booking b on c.id = b.customer_id
group by c.customer_name;


/*
output:
# customer_name, total_revenue
'draco malfoy', '960'
'ginni weasley', '34000'
'harry potter', '11440'
'hermione granger', '18000'
'ronald weasley', '32000'
*/

-- #13.Calculate the average ticket price for events in each category and venue

select e.event_type, v.venue_name, avg(e.ticket_price) from event e, venue v 
where e.venue_id=v.id group by e.event_type, v.venue_name;

/* 
output:
# event_type, venue_name, AVG(e.ticket_price)
'concert', 'pondicherry', '600'
'sports', 'chennai', '3500'
'sports', 'mumbai', '8000'
*/
-- task 4

-- #1. calculate the average ticket price for events in each venue using a subquery.

select v.venue_name, avg(e.ticket_price) as avg_ticket_price
from venue v join event e on v.venue_id = e.venue_id
group by v.venue_name;

-- #2 find events with more than 50% of tickets sold using subquery.

select event_id, event_name, available_seats
from event
where (total_seats-available_seats) > (total_seats/2);

-- #3. calculate the total number of tickets sold for each event.

select event_name, sum(total_seats - available_seats) as tickets_sold
from event
group by event_name;
/*
late ms. lata mangeshkar musical 50
csk vs rcb 22997
csk vs rr 22990
mi vs kkr 27900
*/

-- #4 find users who have not booked any tickets using a not exists subquery.

insert into customer(customer_name,email,phone_number) values
('frodo baggins', 'frodo@latr.com', '3454');

select *
from customer
where customer_id not in (select distinct c.customer_id
from customer c join
booking b on c.customer_id = b.customer_id);

/*
6 severus snape sev@gmail.co 56556
7 frodo baggins frodo@latr.com 3454
*/

-- #6. calculate the total number of tickets sold for each event type using a subquery in the from clause.

select event_name, sum(total_seats-available_seats) as total_ticket_sold
from event
group by event_name;
/*
late ms. lata mangeshkar musical 50
csk vs rcb 22997
csk vs rr 22990
mi vs kkr 27900
*/

-- #7. find events with ticket prices higher than the average ticket price using a subquery in the where clause.

select *
from event
where ticket_price > (select avg (ticket_price)
from event);
/*4 mi vs kkr 2024-05-01 15:30:00 28000 100 8000 sports 1
*/
-- #8 calculate the total revenue generated by events for each user using a correlated subquery.

select c.customer_name, sum(b.total_cost)
from customer c join booking b
on c.customer_id = b.customer_id
group by c.customer_name;

/*
harry potter 11440
draco malfoy 960
hermione granger 18000
ginni weasley 34000
ronald weasley 32000
*/

-- #9 users who have booked tickets for events in a given venue using a subquery in the where clause.

select *
from customer
where customer_id in(select customer_id from booking
where event_id in (select event_id from event
where venue_id in (select venue_id from venue
where venue_name = 'mumbai')));

/* 
2 ronald weasley ron@gmail.com 45454545
*/

-- #10 total number of tickets sold for each event category using a subquery with group by.

select event_type , sum(total_seats-available_seats) as tickets_sold
from event
group by event_type;
/*
concert 50
sports 73887
*/
